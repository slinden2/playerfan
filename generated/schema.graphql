### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Comment {
  author: User!
  authorId: String!
  content: String!
  createdAt: DateTime!
  highlight: Highlight!
  highlightId: String!
  id: String!
}

input CommentWhereUniqueInput {
  id: String
}

type Conference {
  abbreviation: String!
  activeSeasons(after: ConferenceActiveSeasonsWhereUniqueInput, before: ConferenceActiveSeasonsWhereUniqueInput, first: Int, last: Int): [ConferenceActiveSeasons!]!
  conferenceIdApi: Int!
  divisions(after: DivisionConferenceWhereUniqueInput, before: DivisionConferenceWhereUniqueInput, first: Int, last: Int): [DivisionConference!]!
  id: String!
  link: String!
  name: String!
  shortName: String!
}

type ConferenceActiveSeasons {
  conference: Conference!
  conferenceId: String!
  id: String!
  season: String!
}

input ConferenceActiveSeasonsSeasonConferenceIdCompoundUniqueInput {
  conferenceId: String!
  season: String!
}

input ConferenceActiveSeasonsWhereUniqueInput {
  id: String
  season_conferenceId: ConferenceActiveSeasonsSeasonConferenceIdCompoundUniqueInput
}

scalar DateTime

enum Decision {
  L
  W
}

type Division {
  abbreviation: String!
  activeSeasons(after: DivisionActiveSeasonsWhereUniqueInput, before: DivisionActiveSeasonsWhereUniqueInput, first: Int, last: Int): [DivisionActiveSeasons!]!
  conferences(after: DivisionConferenceWhereUniqueInput, before: DivisionConferenceWhereUniqueInput, first: Int, last: Int): [DivisionConference!]!
  divisionIdApi: Int!
  id: String!
  link: String!
  name: String!
  shortName: String!
}

type DivisionActiveSeasons {
  division: Division!
  divisionId: String!
  id: String!
  season: String!
}

input DivisionActiveSeasonsSeasonDivisionIdCompoundUniqueInput {
  divisionId: String!
  season: String!
}

input DivisionActiveSeasonsWhereUniqueInput {
  id: String
  season_divisionId: DivisionActiveSeasonsSeasonDivisionIdCompoundUniqueInput
}

type DivisionConference {
  conference: Conference!
  conferenceId: String!
  division: Division!
  divisionId: String!
  id: String!
  season: String!
}

input DivisionConferenceSeasonConferenceIdDivisionIdCompoundUniqueInput {
  conferenceId: String!
  divisionId: String!
  season: String!
}

input DivisionConferenceWhereUniqueInput {
  id: String
  season_conferenceId_divisionId: DivisionConferenceSeasonConferenceIdDivisionIdCompoundUniqueInput
}

type Game {
  apiDate: DateTime!
  awayScore: Int!
  awayTeam: Team!
  awayTeamId: String!
  boxscoresFetched: Boolean!
  contentLink: String!
  gameDate: DateTime!
  gamePk: Int!
  gameType: GameType!
  goalieBoxscores(after: GoalieBoxscoreWhereUniqueInput, before: GoalieBoxscoreWhereUniqueInput, first: Int, last: Int): [GoalieBoxscore!]!
  highlight(after: HighlightWhereUniqueInput, before: HighlightWhereUniqueInput, first: Int, last: Int): [Highlight!]!
  highlightMetaFetched: Boolean!
  highlightsFetched: Boolean!
  homeScore: Int!
  homeTeam: Team!
  homeTeamId: String!
  id: String!
  linescores(after: LinescoreWhereUniqueInput, before: LinescoreWhereUniqueInput, first: Int, last: Int): [Linescore!]!
  linescoresFetched: Boolean!
  liveLink: String!
  playbacksFetched: Boolean!
  skaterBoxscores(after: SkaterBoxscoreWhereUniqueInput, before: SkaterBoxscoreWhereUniqueInput, first: Int, last: Int): [SkaterBoxscore!]!
  statusCode: Int!
}

enum GameType {
  P
  R
}

input GameWhereUniqueInput {
  contentLink: String
  gamePk: Int
  id: String
  liveLink: String
}

type GoalieBoxscore {
  assists: Int!
  decision: Decision
  evenSavePct: Float
  evenSaves: Int!
  game: Game!
  gameId: String!
  gamePk: Int!
  goals: Int!
  id: String!
  penaltyMinutes: Int!
  player: Player!
  playerId: String!
  powerPlaySavePct: Float
  powerPlaySaves: Int!
  powerPlayShotsAgainst: Int!
  savePct: Float!
  saves: Int!
  shortHandedSavePct: Float
  shortHandedSaves: Int!
  shortHandedShotsAgainst: Int!
  shotsAgainst: Int!
  team: Team!
  teamId: String!
  timeOnIce: Int!
}

input GoalieBoxscoreGameIdPlayerIdCompoundUniqueInput {
  gameId: String!
  playerId: String!
}

input GoalieBoxscoreWhereUniqueInput {
  gameId_playerId: GoalieBoxscoreGameIdPlayerIdCompoundUniqueInput
  id: String
}

type Highlight {
  blurb: String!
  comments(after: CommentWhereUniqueInput, before: CommentWhereUniqueInput, first: Int, last: Int): [Comment!]!
  description: String!
  duration: Int!
  eventIdApi: Int
  game: Game!
  gameId: String!
  gamePk: Int!
  highlightMeta: HighlightMeta
  id: String!
  likedBy(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
  mediaPlaybackIdApi: Int!
  opponent: Team
  opponentId: String
  playbacks(after: PlaybackWhereUniqueInput, before: PlaybackWhereUniqueInput, first: Int, last: Int): [Playback!]!
  team: Team
  teamId: String
  title: String!
  type: HighlightType!
  videoIdApi: Int!
}

type HighlightMeta {
  assist1: Player
  assist1Id: String
  assist2: Player
  assist2Id: String
  coordX: Int!
  coordY: Int!
  dateTime: DateTime!
  emptyNet: Boolean!
  eventIdApi: Int!
  eventIdxApi: Int!
  gamePk: Int!
  gameWinningGoal: Boolean!
  goalie: Player
  goalieId: String
  hasVideo: Boolean!
  highlight: Highlight
  highlightId: String
  id: String!
  periodNumber: Int!
  periodTime: Int!
  periodType: PeriodType!
  scorer: Player!
  scorerId: String!
  shotType: String!
  team: Team!
  teamId: String!
  type: VideoDataType!
}

input HighlightMetaGamePkEventIdApiCompoundUniqueInput {
  eventIdApi: Int!
  gamePk: Int!
}

input HighlightMetaWhereUniqueInput {
  gamePk_eventIdApi: HighlightMetaGamePkEventIdApiCompoundUniqueInput
  id: String
}

enum HighlightType {
  CONDENSED
  MILESTONE
  RECAP
}

input HighlightWhereUniqueInput {
  id: String
  videoIdApi: Int
}

type Linescore {
  blocked: Int!
  faceOffWins: Int!
  faceOffsTaken: Int!
  game: Game!
  gameId: String!
  gamePk: Int!
  giveaways: Int!
  goalsAgainst: Int!
  goalsFor: Int!
  hitsAgainst: Int!
  hitsFor: Int!
  id: String!
  isHomeGame: Boolean!
  loss: Boolean!
  opponent: Team!
  opponentId: String!
  ot: Boolean!
  otWin: Boolean!
  penaltyMinutes: Int!
  points: Int!
  powerPlayGoals: Int!
  powerPlayGoalsAllowed: Int!
  powerPlayOpportunities: Int!
  powerPlayOpportunitiesAllowed: Int!
  shootOutWin: Boolean!
  shotsAgainst: Int!
  shotsFor: Int!
  takeaways: Int!
  team: Team!
  teamId: String!
  win: Boolean!
}

input LinescoreGamePkTeamIdCompoundUniqueInput {
  gamePk: Int!
  teamId: String!
}

input LinescoreWhereUniqueInput {
  gamePk_teamId: LinescoreGamePkTeamIdCompoundUniqueInput
  id: String
}

enum PeriodType {
  OVERTIME
  REGULAR
  SHOOTOUT
}

type Playback {
  highlight: Highlight!
  highlightId: String!
  id: String!
  playbackTypeId: String!
  type: PlaybackType!
  url: String!
}

type PlaybackType {
  height: Int
  id: String!
  name: String!
  playbacks(after: PlaybackWhereUniqueInput, before: PlaybackWhereUniqueInput, first: Int, last: Int): [Playback!]!
  width: Int
}

input PlaybackUrlPlaybackTypeIdCompoundUniqueInput {
  playbackTypeId: String!
  url: String!
}

input PlaybackWhereUniqueInput {
  id: String
  url_playbackTypeId: PlaybackUrlPlaybackTypeIdCompoundUniqueInput
}

type Player {
  active: Boolean!
  alternateCaptain: Boolean!
  birthCity: String!
  birthCountry: String!
  birthDate: DateTime!
  birthStateProvince: String
  captain: Boolean!
  favoritedBy(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
  firstName: String!
  goalieBoxscores(after: GoalieBoxscoreWhereUniqueInput, before: GoalieBoxscoreWhereUniqueInput, first: Int, last: Int): [GoalieBoxscore!]!
  height: Int!
  highlightMetaAssist1(after: HighlightMetaWhereUniqueInput, before: HighlightMetaWhereUniqueInput, first: Int, last: Int): [HighlightMeta!]!
  highlightMetaAssist2(after: HighlightMetaWhereUniqueInput, before: HighlightMetaWhereUniqueInput, first: Int, last: Int): [HighlightMeta!]!
  highlightMetaGoal(after: HighlightMetaWhereUniqueInput, before: HighlightMetaWhereUniqueInput, first: Int, last: Int): [HighlightMeta!]!
  highlightMetaGoalie(after: HighlightMetaWhereUniqueInput, before: HighlightMetaWhereUniqueInput, first: Int, last: Int): [HighlightMeta!]!
  id: String!
  lastName: String!
  link: String!
  nationality: String!
  playerIdApi: Int!
  primaryNumber: Int!
  primaryPosition: Position!
  rookie: Boolean!
  rosterStatus: RosterStatus!
  shootsCatches: ShootsCatches!
  siteLink: String!
  skaterBoxscores(after: SkaterBoxscoreWhereUniqueInput, before: SkaterBoxscoreWhereUniqueInput, first: Int, last: Int): [SkaterBoxscore!]!
  teams(after: PlayerTeamWhereUniqueInput, before: PlayerTeamWhereUniqueInput, first: Int, last: Int): [PlayerTeam!]!
  weight: Int!
}

type PlayerTeam {
  endDate: DateTime
  id: String!
  player: Player!
  playerId: String!
  startDate: DateTime!
  team: Team
  teamId: String
}

input PlayerTeamStartDateTeamIdPlayerIdCompoundUniqueInput {
  playerId: String!
  startDate: DateTime!
  teamId: String!
}

input PlayerTeamWhereUniqueInput {
  id: String
  startDate_teamId_playerId: PlayerTeamStartDateTeamIdPlayerIdCompoundUniqueInput
}

input PlayerWhereUniqueInput {
  id: String
  playerIdApi: Int
}

enum Position {
  C
  D
  G
  L
  NA
  R
}

type Query {
  allDivisions: [Division]!
}

enum Role {
  ADMIN
  MODERATOR
  USER
}

enum RosterStatus {
  I
  N
  Y
}

enum ShootsCatches {
  L
  R
}

type SkaterBoxscore {
  assists: Int!
  blocked: Int!
  evenTimeOnIce: Int!
  faceOffWins: Int!
  faceOffsTaken: Int!
  game: Game!
  gameId: String!
  gamePk: Int!
  giveaways: Int!
  goals: Int!
  hits: Int!
  id: String!
  penaltyMinutes: Int!
  player: Player!
  playerId: String!
  plusMinus: Int!
  points: Int!
  powerPlayAssists: Int!
  powerPlayGoals: Int!
  powerPlayTimeOnIce: Int!
  shortHandedAssists: Int!
  shortHandedGoals: Int!
  shortHandedTimeOnIce: Int!
  shots: Int!
  takeaways: Int!
  team: Team!
  teamId: String!
  timeOnIce: Int!
}

input SkaterBoxscoreGameIdPlayerIdCompoundUniqueInput {
  gameId: String!
  playerId: String!
}

input SkaterBoxscoreWhereUniqueInput {
  gameId_playerId: SkaterBoxscoreGameIdPlayerIdCompoundUniqueInput
  id: String
}

type Team {
  abbreviation: String!
  activeSeasons(after: TeamActiveSeasonsWhereUniqueInput, before: TeamActiveSeasonsWhereUniqueInput, first: Int, last: Int): [TeamActiveSeasons!]!
  awayGames(after: GameWhereUniqueInput, before: GameWhereUniqueInput, first: Int, last: Int): [Game!]!
  conferences(after: TeamConferenceWhereUniqueInput, before: TeamConferenceWhereUniqueInput, first: Int, last: Int): [TeamConference!]!
  divisions(after: TeamDivisionWhereUniqueInput, before: TeamDivisionWhereUniqueInput, first: Int, last: Int): [TeamDivision!]!
  firstYearOfPlay: Int!
  goalieBoxscores(after: GoalieBoxscoreWhereUniqueInput, before: GoalieBoxscoreWhereUniqueInput, first: Int, last: Int): [GoalieBoxscore!]!
  highlightMeta(after: HighlightMetaWhereUniqueInput, before: HighlightMetaWhereUniqueInput, first: Int, last: Int): [HighlightMeta!]!
  highlights(after: HighlightWhereUniqueInput, before: HighlightWhereUniqueInput, first: Int, last: Int): [Highlight!]!
  highlightsAgainst(after: HighlightWhereUniqueInput, before: HighlightWhereUniqueInput, first: Int, last: Int): [Highlight!]!
  homeGames(after: GameWhereUniqueInput, before: GameWhereUniqueInput, first: Int, last: Int): [Game!]!
  id: String!
  linescores(after: LinescoreWhereUniqueInput, before: LinescoreWhereUniqueInput, first: Int, last: Int): [Linescore!]!
  link: String!
  locationName: String!
  name: String!
  officialSiteUrl: String!
  opponentLinescores(after: LinescoreWhereUniqueInput, before: LinescoreWhereUniqueInput, first: Int, last: Int): [Linescore!]!
  players(after: PlayerTeamWhereUniqueInput, before: PlayerTeamWhereUniqueInput, first: Int, last: Int): [PlayerTeam!]!
  shortName: String!
  siteLink: String!
  skaterBoxscores(after: SkaterBoxscoreWhereUniqueInput, before: SkaterBoxscoreWhereUniqueInput, first: Int, last: Int): [SkaterBoxscore!]!
  teamIdApi: Int!
  teamName: String!
  twitterHashtag: String!
}

type TeamActiveSeasons {
  id: String!
  season: String!
  team: Team!
  teamId: String!
}

input TeamActiveSeasonsSeasonTeamIdCompoundUniqueInput {
  season: String!
  teamId: String!
}

input TeamActiveSeasonsWhereUniqueInput {
  id: String
  season_teamId: TeamActiveSeasonsSeasonTeamIdCompoundUniqueInput
}

type TeamConference {
  conference: Conference!
  conferenceId: String!
  id: String!
  season: String!
  team: Team!
  teamId: String!
}

input TeamConferenceSeasonConferenceIdTeamIdCompoundUniqueInput {
  conferenceId: String!
  season: String!
  teamId: String!
}

input TeamConferenceWhereUniqueInput {
  id: String
  season_conferenceId_teamId: TeamConferenceSeasonConferenceIdTeamIdCompoundUniqueInput
}

type TeamDivision {
  division: Division!
  divisionId: String!
  id: String!
  season: String!
  team: Team!
  teamId: String!
}

input TeamDivisionSeasonDivisionIdTeamIdCompoundUniqueInput {
  divisionId: String!
  season: String!
  teamId: String!
}

input TeamDivisionWhereUniqueInput {
  id: String
  season_divisionId_teamId: TeamDivisionSeasonDivisionIdTeamIdCompoundUniqueInput
}

type User {
  comments(after: CommentWhereUniqueInput, before: CommentWhereUniqueInput, first: Int, last: Int): [Comment!]!
  createdAt: DateTime!
  email: String!
  favoritePlayers(after: PlayerWhereUniqueInput, before: PlayerWhereUniqueInput, first: Int, last: Int): [Player!]!
  id: String!
  isVerified: Boolean!
  likedHighlights(after: HighlightWhereUniqueInput, before: HighlightWhereUniqueInput, first: Int, last: Int): [Highlight!]!
  role: Role!
  updatedAt: DateTime!
  username: String!
  usernameLower: String!
}

input UserWhereUniqueInput {
  email: String
  id: String
  username: String
  usernameLower: String
}

enum VideoDataType {
  GOAL
  SHOT
}
