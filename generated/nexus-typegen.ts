/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import { Context } from "./../graphql/context"


declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    model: NexusPrisma<TypeName, 'model'>
    crud: any
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  Position: "C" | "D" | "G" | "L" | "NA" | "R"
  RosterStatus: "I" | "N" | "Y"
  ShootsCatches: "L" | "R"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  Player: { // root type
    active: boolean; // Boolean!
    alternateCaptain: boolean; // Boolean!
    birthCity: string; // String!
    birthCountry: string; // String!
    birthDate: NexusGenScalars['DateTime']; // DateTime!
    birthStateProvince?: string | null; // String
    captain: boolean; // Boolean!
    firstName: string; // String!
    height: number; // Int!
    id: string; // String!
    lastName: string; // String!
    link: string; // String!
    nationality: string; // String!
    playerIdApi: number; // Int!
    primaryNumber: number; // Int!
    primaryPosition: NexusGenEnums['Position']; // Position!
    rookie: boolean; // Boolean!
    rosterStatus: NexusGenEnums['RosterStatus']; // RosterStatus!
    shootsCatches: NexusGenEnums['ShootsCatches']; // ShootsCatches!
    siteLink: string; // String!
    teamId: string; // String!
    weight: number; // Int!
  }
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Player: { // field return type
    active: boolean; // Boolean!
    alternateCaptain: boolean; // Boolean!
    birthCity: string; // String!
    birthCountry: string; // String!
    birthDate: NexusGenScalars['DateTime']; // DateTime!
    birthStateProvince: string | null; // String
    captain: boolean; // Boolean!
    firstName: string; // String!
    height: number; // Int!
    id: string; // String!
    lastName: string; // String!
    link: string; // String!
    nationality: string; // String!
    playerIdApi: number; // Int!
    primaryNumber: number; // Int!
    primaryPosition: NexusGenEnums['Position']; // Position!
    rookie: boolean; // Boolean!
    rosterStatus: NexusGenEnums['RosterStatus']; // RosterStatus!
    shootsCatches: NexusGenEnums['ShootsCatches']; // ShootsCatches!
    siteLink: string; // String!
    teamId: string; // String!
    weight: number; // Int!
  }
  Query: { // field return type
    allPlayers: Array<NexusGenRootTypes['Player'] | null>; // [Player]!
  }
}

export interface NexusGenFieldTypeNames {
  Player: { // field return type name
    active: 'Boolean'
    alternateCaptain: 'Boolean'
    birthCity: 'String'
    birthCountry: 'String'
    birthDate: 'DateTime'
    birthStateProvince: 'String'
    captain: 'Boolean'
    firstName: 'String'
    height: 'Int'
    id: 'String'
    lastName: 'String'
    link: 'String'
    nationality: 'String'
    playerIdApi: 'Int'
    primaryNumber: 'Int'
    primaryPosition: 'Position'
    rookie: 'Boolean'
    rosterStatus: 'RosterStatus'
    shootsCatches: 'ShootsCatches'
    siteLink: 'String'
    teamId: 'String'
    weight: 'Int'
  }
  Query: { // field return type name
    allPlayers: 'Player'
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}